ext.kotlinVersion = '1.0.5'

buildscript {
    ext.kotlin_version = '1.0.5'
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
        classpath 'org.zeroturnaround:zt-exec:1.6'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'provided-base'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

test {
    useTestNG()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    compile 'org.mongodb:mongo-java-driver:3.3.0'
    compile 'org.zeroturnaround:zt-exec:1.9'
    compile 'org.zeroturnaround:zt-process-killer:1.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-compress:1.9'
    compile 'com.jayway.awaitility:awaitility:1.6.3'
    compile 'com.github.zafarkhaja:java-semver:0.9.0'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.yaml:snakeyaml:1.15'

    provided 'org.testng:testng:6.8.21'

    testCompile 'ch.qos.logback:logback-classic:1.1.3'
    testCompile 'org.apache.httpcomponents:fluent-hc:4.5'
    testCompile 'org.jsoup:jsoup:1.8.2'
}

modifyPom {
    project {
        name = 'BottleRocket'
        description = 'An API for programmatically creating MongoDB clusters for use in testing MongoDB based applications and libraries.'
        url 'https://github.com/mongodb/morphia.git'

        scm {
            url 'https://github.com/evanchooly/bottlerocket.git'
            connection 'scm:git:https://github.com/evanchooly/bottlerocket.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                name 'Justin Lee'
            }
        }
    }

    whenConfigured { resultPom ->
        resultPom.dependencies.removeAll { dep -> dep.scope != 'compile' }
        resultPom.dependencies*.scope = null
    }
}

tasks.withType(Test) {

    beforeTest { descr ->
        logger.info("[Test ${descr.className} > ${descr.name}]")
    }

    afterTest { descr, result ->
        def failureStartTime = result.getResultType().toString() == "FAILURE" ? " Started at: ${result.getStartTime()}" : ""
        logger.info("[Test ${descr.className} > ${descr.name}] ${result.getResultType()} "
                            + "(${result.getEndTime() - result.getStartTime()} ms) ${failureStartTime}")

    }

    testLogging { exceptionFormat = 'full' }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}